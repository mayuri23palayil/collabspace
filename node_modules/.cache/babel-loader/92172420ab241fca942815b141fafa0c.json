{"ast":null,"code":"import _classCallCheck from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n\n  var _super = _createSuper(Polling);\n\n  function Polling() {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.apply(this, arguments);\n    _this._polling = false;\n    return _this;\n  }\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n\n      this.readyState = \"pausing\";\n\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n\n      if (this._polling || !this.writable) {\n        var total = 0;\n\n        if (this._polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_poll\",\n    value: function _poll() {\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        } // if its a close packet, we close the ongoing requests\n\n\n        if (\"close\" === packet.type) {\n          _this3.onClose({\n            description: \"transport closed by the server\"\n          });\n\n          return false;\n        } // otherwise bypass onData and handle the message\n\n\n        _this3.onPacket(packet);\n      }; // decode payload\n\n\n      decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n\n          _this5.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var query = this.query || {}; // cache busting is forced\n\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = randomString();\n      }\n\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n\n      return this.createUri(schema, query);\n    }\n  }]);\n\n  return Polling;\n}(Transport);","map":{"version":3,"sources":["C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/engine.io-client/build/esm/transports/polling.js"],"names":["Transport","randomString","encodePayload","decodePayload","Polling","arguments","_polling","_poll","onPause","readyState","pause","writable","total","once","doPoll","emitReserved","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","close","write","packets","doWrite","schema","opts","secure","query","timestampRequests","timestampParam","supportsBinary","sid","b64","createUri"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}