{"ast":null,"code":"import _get from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick } from \"./globals.node.js\";\nvar withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\nvar OFFLINE_EVENT_LISTENERS = [];\n\nif (withEventListeners) {\n  // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n  // script, so we create one single event listener here which will forward the event to the socket instances\n  addEventListener(\"offline\", function () {\n    OFFLINE_EVENT_LISTENERS.forEach(function (listener) {\n      return listener();\n    });\n  }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\n\n\nexport var SocketWithoutUpgrade = /*#__PURE__*/function (_Emitter) {\n  _inherits(SocketWithoutUpgrade, _Emitter);\n\n  var _super = _createSuper(SocketWithoutUpgrade);\n\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  function SocketWithoutUpgrade(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, SocketWithoutUpgrade);\n\n    _this = _super.call(this);\n    _this.binaryType = defaultBinaryType;\n    _this.writeBuffer = [];\n    _this._prevBufferLen = 0;\n    _this._pingInterval = -1;\n    _this._pingTimeout = -1;\n    _this._maxPayload = -1;\n    /**\n     * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n     * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n     */\n\n    _this._pingTimeoutTime = Infinity;\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      var parsedUri = parse(uri);\n      opts.hostname = parsedUri.host;\n      opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n      opts.port = parsedUri.port;\n      if (parsedUri.query) opts.query = parsedUri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = [];\n    _this._transportsByName = {};\n    opts.transports.forEach(function (t) {\n      var transportName = t.prototype.name;\n\n      _this.transports.push(transportName);\n\n      _this._transportsByName[transportName] = t;\n    });\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = decode(_this.opts.query);\n    }\n\n    if (withEventListeners) {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        _this._beforeunloadEventListener = function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n\n            _this.transport.close();\n          }\n        };\n\n        addEventListener(\"beforeunload\", _this._beforeunloadEventListener, false);\n      }\n\n      if (_this.hostname !== \"localhost\") {\n        _this._offlineEventListener = function () {\n          _this._onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        OFFLINE_EVENT_LISTENERS.push(_this._offlineEventListener);\n      }\n    }\n\n    if (_this.opts.withCredentials) {\n      _this._cookieJar = createCookieJar();\n    }\n\n    _this._open();\n\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n\n\n  _createClass(SocketWithoutUpgrade, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      var query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      var _this2 = this;\n\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n\n      var transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      var transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", function (reason) {\n        return _this3._onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onPacket\",\n    value: function _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emitReserved(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this._sendPacket(\"pong\");\n\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n\n            this._resetPingTimeout();\n\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\"); // @ts-ignore\n\n            err.code = packet.data;\n\n            this._onError(err);\n\n            break;\n\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_resetPingTimeout\",\n    value: function _resetPingTimeout() {\n      var _this4 = this;\n\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      var delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this4._onClose(\"ping timeout\");\n      }, delay);\n\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onDrain\",\n    value: function _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this._prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this._getWritablePackets();\n\n        this.transport.send(packets); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getWritablePackets\",\n    value: function _getWritablePackets() {\n      var shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n\n      var payloadSize = 1; // first packet type\n\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n\n        if (data) {\n          payloadSize += byteLength(data);\n        }\n\n        if (i > 0 && payloadSize > this._maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n\n        payloadSize += 2; // separator + packet type\n      }\n\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n\n    /* private */\n\n  }, {\n    key: \"_hasPingExpired\",\n    value: function _hasPingExpired() {\n      var _this5 = this;\n\n      if (!this._pingTimeoutTime) return true;\n\n      var hasExpired = Date.now() > this._pingTimeoutTime;\n\n      if (hasExpired) {\n        this._pingTimeoutTime = 0;\n        nextTick(function () {\n          _this5._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n\n  }, {\n    key: \"_sendPacket\",\n    value: function _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      var close = function close() {\n        _this6._onClose(\"forced close\");\n\n        _this6.transport.close();\n      };\n\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n\n        _this6.off(\"upgradeError\", cleanupAndClose);\n\n        close();\n      };\n\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onError\",\n    value: function _onError(err) {\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        this.transports.shift();\n        return this._open();\n      }\n\n      this.emitReserved(\"error\", err);\n\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners();\n\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n\n          if (this._offlineEventListener) {\n            var i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n\n            if (i !== -1) {\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        } // set ready state\n\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }]);\n\n  return SocketWithoutUpgrade;\n}(Emitter);\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\n\nexport var SocketWithUpgrade = /*#__PURE__*/function (_SocketWithoutUpgrade) {\n  _inherits(SocketWithUpgrade, _SocketWithoutUpgrade);\n\n  var _super2 = _createSuper(SocketWithUpgrade);\n\n  function SocketWithUpgrade() {\n    var _this7;\n\n    _classCallCheck(this, SocketWithUpgrade);\n\n    _this7 = _super2.apply(this, arguments);\n    _this7._upgrades = [];\n    return _this7;\n  }\n\n  _createClass(SocketWithUpgrade, [{\n    key: \"onOpen\",\n    value: function onOpen() {\n      _get(_getPrototypeOf(SocketWithUpgrade.prototype), \"onOpen\", this).call(this);\n\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        for (var i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n\n  }, {\n    key: \"_probe\",\n    value: function _probe(name) {\n      var _this8 = this;\n\n      var transport = this.createTransport(name);\n      var failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this8.upgrading = true;\n\n            _this8.emitReserved(\"upgrading\", transport);\n\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n            _this8.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this8.readyState) return;\n              cleanup();\n\n              _this8.setTransport(transport);\n\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n\n              _this8.emitReserved(\"upgrade\", transport);\n\n              transport = null;\n              _this8.upgrading = false;\n\n              _this8.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\"); // @ts-ignore\n\n            err.transport = transport.name;\n\n            _this8.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err); // @ts-ignore\n\n        error.transport = transport.name;\n        freezeTransport();\n\n        _this8.emitReserved(\"upgradeError\", error);\n      };\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n\n        _this8.off(\"close\", onclose);\n\n        _this8.off(\"upgrading\", onupgrade);\n      };\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(function () {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n\n      _get(_getPrototypeOf(SocketWithUpgrade.prototype), \"onHandshake\", this).call(this, data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n\n  }, {\n    key: \"_filterUpgrades\",\n    value: function _filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n\n      for (var i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return SocketWithUpgrade;\n}(SocketWithoutUpgrade);\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\n\nexport var Socket = /*#__PURE__*/function (_SocketWithUpgrade) {\n  _inherits(Socket, _SocketWithUpgrade);\n\n  var _super3 = _createSuper(Socket);\n\n  function Socket(uri) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    var o = typeof uri === \"object\" ? uri : opts;\n\n    if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n      o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(function (transportName) {\n        return DEFAULT_TRANSPORTS[transportName];\n      }).filter(function (t) {\n        return !!t;\n      });\n    }\n\n    return _super3.call(this, uri, o);\n  }\n\n  return _createClass(Socket);\n}(SocketWithUpgrade);","map":{"version":3,"sources":["C:/Users/mayur/Downloads/realtime-code-editor-main/realtime-code-editor-main/node_modules/engine.io-client/build/esm/socket.js"],"names":["transports","DEFAULT_TRANSPORTS","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","createCookieJar","defaultBinaryType","nextTick","withEventListeners","addEventListener","removeEventListener","OFFLINE_EVENT_LISTENERS","forEach","listener","SocketWithoutUpgrade","uri","opts","binaryType","writeBuffer","_prevBufferLen","_pingInterval","_pingTimeout","_maxPayload","_pingTimeoutTime","Infinity","parsedUri","hostname","host","secure","port","query","location","_transportsByName","t","transportName","prototype","name","push","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","_beforeunloadEventListener","transport","removeAllListeners","close","_offlineEventListener","_onClose","description","_cookieJar","_open","EIO","id","sid","socket","length","setTimeoutFn","emitReserved","priorWebsocketSuccess","indexOf","readyState","createTransport","open","setTransport","on","_onDrain","bind","_onPacket","_onError","reason","flush","packet","type","onHandshake","JSON","data","_sendPacket","_resetPingTimeout","err","Error","code","pingInterval","pingTimeout","maxPayload","onOpen","clearTimeoutFn","_pingTimeoutTimer","delay","Date","now","autoUnref","unref","splice","writable","upgrading","packets","_getWritablePackets","send","shouldCheckPayloadSize","payloadSize","i","slice","hasExpired","msg","options","fn","undefined","compress","once","cleanupAndClose","off","waitForUpgrade","tryAllTransports","shift","SocketWithUpgrade","arguments","_upgrades","_probe","failed","onTransportOpen","pause","cleanup","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","_filterUpgrades","upgrades","filteredUpgrades","Socket","o","map","filter"],"mappings":"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","sourcesContent":["import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}